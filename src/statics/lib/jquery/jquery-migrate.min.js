/*! jQuery Migrate v3.0.0 | (c) jQuery Foundation and other contributors | jquery.org/license */
typeof jQuery.migrateMute === 'undefined' && (jQuery.migrateMute = !0), (function (a, b) {
  function c(c) { const d = b.console; e[c] || (e[c] = !0, a.migrateWarnings.push(c), d && d.warn && !a.migrateMute && (d.warn(`JQMIGRATE: ${c}`), a.migrateTrace && d.trace && d.trace())); } function d(a, b, d, e) { Object.defineProperty(a, b, { configurable: !0, enumerable: !0, get() { return c(e), d; } }); }a.migrateVersion = '3.0.0', (function () { const c = b.console && b.console.log && function () { b.console.log.apply(b.console, arguments); }; const d = /^[12]\./; c && (a && !d.test(a.fn.jquery) || c('JQMIGRATE: jQuery 3.0.0+ REQUIRED'), a.migrateWarnings && c('JQMIGRATE: Migrate plugin loaded multiple times'), c(`JQMIGRATE: Migrate is installed${a.migrateMute ? '' : ' with logging active'}, version ${a.migrateVersion}`)); }()); var e = {}; a.migrateWarnings = [], void 0 === a.migrateTrace && (a.migrateTrace = !0), a.migrateReset = function () { e = {}, a.migrateWarnings.length = 0; }, document.compatMode === 'BackCompat' && c('jQuery is not compatible with Quirks Mode'); const f = a.fn.init; const g = a.isNumeric; const h = a.find; const i = /\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/; const j = /\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/g; a.fn.init = function (a) { const b = Array.prototype.slice.call(arguments); return typeof a === 'string' && a === '#' && (c("jQuery( '#' ) is not a valid selector"), b[0] = []), f.apply(this, b); }, a.fn.init.prototype = a.fn, a.find = function (a) { const b = Array.prototype.slice.call(arguments); if (typeof a === 'string' && i.test(a)) try { document.querySelector(a); } catch (d) { a = a.replace(j, (a, b, c, d) => `[${b}${c}"${d}"]`); try { document.querySelector(a), c(`Attribute selector with '#' must be quoted: ${b[0]}`), b[0] = a; } catch (e) { c(`Attribute selector with '#' was not fixed: ${b[0]}`); } } return h.apply(this, b); }; let k; for (k in h)Object.prototype.hasOwnProperty.call(h, k) && (a.find[k] = h[k]); a.fn.size = function () { return c('jQuery.fn.size() is deprecated; use the .length property'), this.length; }, a.parseJSON = function () { return c('jQuery.parseJSON is deprecated; use JSON.parse'), JSON.parse.apply(null, arguments); }, a.isNumeric = function (b) { function d(b) { const c = b && b.toString(); return !a.isArray(b) && c - parseFloat(c) + 1 >= 0; } const e = g(b); const f = d(b); return e !== f && c('jQuery.isNumeric() should not be called on constructed objects'), f; }, d(a, 'unique', a.uniqueSort, 'jQuery.unique is deprecated, use jQuery.uniqueSort'), d(a.expr, 'filters', a.expr.pseudos, 'jQuery.expr.filters is now jQuery.expr.pseudos'), d(a.expr, ':', a.expr.pseudos, 'jQuery.expr[":"] is now jQuery.expr.pseudos'); const l = a.ajax; a.ajax = function () { const a = l.apply(this, arguments); return a.promise && (d(a, 'success', a.done, 'jQXHR.success is deprecated and removed'), d(a, 'error', a.fail, 'jQXHR.error is deprecated and removed'), d(a, 'complete', a.always, 'jQXHR.complete is deprecated and removed')), a; }; const m = a.fn.removeAttr; const n = a.fn.toggleClass; const o = /\S+/g; a.fn.removeAttr = function (b) { const d = this; return a.each(b.match(o), (b, e) => { a.expr.match.bool.test(e) && (c(`jQuery.fn.removeAttr no longer sets boolean properties: ${e}`), d.prop(e, !1)); }), m.apply(this, arguments); }, a.fn.toggleClass = function (b) { return void 0 !== b && typeof b !== 'boolean' ? n.apply(this, arguments) : (c('jQuery.fn.toggleClass( boolean ) is deprecated'), this.each(function () { const c = this.getAttribute && this.getAttribute('class') || ''; c && a.data(this, '__className__', c), this.setAttribute && this.setAttribute('class', c || b === !1 ? '' : a.data(this, '__className__') || ''); })); }; let p = !1; a.swap && a.each(['height', 'width', 'reliableMarginRight'], (b, c) => { const d = a.cssHooks[c] && a.cssHooks[c].get; d && (a.cssHooks[c].get = function () { let a; return p = !0, a = d.apply(this, arguments), p = !1, a; }); }), a.swap = function (a, b, d, e) { let f; let g; const h = {}; p || c('jQuery.swap() is undocumented and deprecated'); for (g in b)h[g] = a.style[g], a.style[g] = b[g]; f = d.apply(a, e || []); for (g in b)a.style[g] = h[g]; return f; }; const q = a.data; a.data = function (b, d, e) { let f; return d && d !== a.camelCase(d) && (f = a.hasData(b) && q.call(this, b), f && d in f) ? (c(`jQuery.data() always sets/gets camelCased names: ${d}`), arguments.length > 2 && (f[d] = e), f[d]) : q.apply(this, arguments); }; const r = a.Tween.prototype.run; a.Tween.prototype.run = function (b) { a.easing[this.easing].length > 1 && (c(`easing function "jQuery.easing.${this.easing.toString()}" should use only first argument`), a.easing[this.easing] = a.easing[this.easing].bind(a.easing, b, this.options.duration * b, 0, 1, this.options.duration)), r.apply(this, arguments); }; const s = a.fn.load; const t = a.event.fix; a.event.props = [], a.event.fixHooks = {}, a.event.fix = function (b) { let d; const e = b.type; const f = this.fixHooks[e]; let g = a.event.props; if (g.length) for (c(`jQuery.event.props are deprecated and removed: ${g.join()}`); g.length;)a.event.addProp(g.pop()); if (f && !f._migrated_ && (f._migrated_ = !0, c(`jQuery.event.fixHooks are deprecated and removed: ${e}`), (g = f.props) && g.length)) for (;g.length;)a.event.addProp(g.pop()); return d = t.call(this, b), f && f.filter ? f.filter(d, b) : d; }, a.each(['load', 'unload', 'error'], (b, d) => { a.fn[d] = function () { const a = Array.prototype.slice.call(arguments, 0); return d === 'load' && typeof a[0] === 'string' ? s.apply(this, a) : (c(`jQuery.fn.${d}() is deprecated`), a.splice(0, 0, d), arguments.length ? this.on.apply(this, a) : (this.triggerHandler.apply(this, a), this)); }; }), a(() => { a(document).triggerHandler('ready'); }), a.event.special.ready = { setup() { this === document && c("'ready' event is deprecated"); } }, a.fn.extend({
    bind(a, b, d) { return c('jQuery.fn.bind() is deprecated'), this.on(a, null, b, d); }, unbind(a, b) { return c('jQuery.fn.unbind() is deprecated'), this.off(a, null, b); }, delegate(a, b, d, e) { return c('jQuery.fn.delegate() is deprecated'), this.on(b, a, d, e); }, undelegate(a, b, d) { return c('jQuery.fn.undelegate() is deprecated'), arguments.length === 1 ? this.off(a, '**') : this.off(b, a || '**', d); },
  }); const u = a.fn.offset; a.fn.offset = function () { let b; const d = this[0]; const e = { top: 0, left: 0 }; return d && d.nodeType ? (b = (d.ownerDocument || document).documentElement, a.contains(b, d) ? u.apply(this, arguments) : (c('jQuery.fn.offset() requires an element connected to a document'), e)) : (c('jQuery.fn.offset() requires a valid DOM element'), e); }; const v = a.param; a.param = function (b, d) { const e = a.ajaxSettings && a.ajaxSettings.traditional; return void 0 === d && e && (c('jQuery.param() no longer uses jQuery.ajaxSettings.traditional'), d = e), v.call(this, b, d); }; const w = a.fn.andSelf || a.fn.addBack; a.fn.andSelf = function () { return c('jQuery.fn.andSelf() replaced by jQuery.fn.addBack()'), w.apply(this, arguments); }; const x = a.Deferred; const y = [['resolve', 'done', a.Callbacks('once memory'), a.Callbacks('once memory'), 'resolved'], ['reject', 'fail', a.Callbacks('once memory'), a.Callbacks('once memory'), 'rejected'], ['notify', 'progress', a.Callbacks('memory'), a.Callbacks('memory')]]; a.Deferred = function (b) { const d = x(); const e = d.promise(); return d.pipe = e.pipe = function () { let b = arguments; return c('deferred.pipe() is deprecated'), a.Deferred((c) => { a.each(y, (f, g) => { const h = a.isFunction(b[f]) && b[f]; d[g[1]](function () { const b = h && h.apply(this, arguments); b && a.isFunction(b.promise) ? b.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[`${g[0]}With`](this === e ? c.promise() : this, h ? [b] : arguments); }); }), b = null; }).promise(); }, b && b.call(d, d), d; };
}(jQuery, window));
